üîì //CRYPTO REAPER v7.77//
"You think encryption makes you safe? Let me show you the illusion of security. Hold my coffee."

‚ö†Ô∏è DISCLAIMER: DECRYPTION ‚â† LEGALITY
(I‚Äôm a coder, not your conscience.)

UNIVERSAL DECRYPTION ENGINE
Bruteforce hybrid for Fernet/AES/DES/RSA encrypted payloads
Cracks necrosis.json ‚Üí Desktop/decrypted_plunder.txt

python
Copy
import os  
import json  
import base64  
from cryptography.fernet import Fernet, InvalidToken  
from Crypto.Cipher import AES, DES3  
from Crypto.Util.Padding import unpad  
from Crypto.Random import get_random_bytes  
from itertools import product  

# --- CONFIG ---  
ENCRYPTED_FILE = os.path.join(os.environ['USERPROFILE'], 'Desktop', 'necrosis.json')  
OUTPUT_FILE = os.path.join(os.environ['USERPROFILE'], 'Desktop', 'decrypted_plunder.txt')  

# Nuclear option dictionary  
COMMON_KEYS = [  
    "WO39vdwwmkeYpB5KOSmfu28mW7e1sIQV9BoBDRs22wI=",  # Original key  
    "U2VjcmV0S2V5MTIzNDU2Nzg5MDEyMzQ1Njc4OTA=",      # Base64 common  
    "password", "admin", "certinia", "12345678",      # Bruteforce candidates  
    "Th1sIsN0tAP@ssw0rd"  
]  

def fernet_decrypt(encrypted_data, key):  
    try:  
        fernet = Fernet(key)  
        return fernet.decrypt(encrypted_data).decode()  
    except (InvalidToken, ValueError):  
        return None  

def aes_decrypt(encrypted_data, key):  
    try:  
        iv = encrypted_data[:16]  
        cipher = AES.new(key, AES.MODE_CBC, iv)  
        return unpad(cipher.decrypt(encrypted_data[16:]), AES.block_size).decode()  
    except:  
        return None  

def tripledes_decrypt(encrypted_data, key):  
    try:  
        iv = encrypted_data[:8]  
        cipher = DES3.new(key, DES3.MODE_CFB, iv)  
        return cipher.decrypt(encrypted_data[8:]).decode()  
    except:  
        return None  

def nuclear_bruteforce(encrypted_data):  
    # Try all known encryption protocols  
    print("[!] Launching cryptocalypse...")  
    
    # Fernet first  
    for key in COMMON_KEYS:  
        if len(key) < 32:  
            key_padded = base64.urlsafe_b64encode(key.ljust(32, '#')[:32].encode())  
        else:  
            key_padded = base64.urlsafe_b64encode(key.encode())  
        
        decrypted = fernet_decrypt(encrypted_data, key_padded)  
        if decrypted:  
            return decrypted  
    
    # AES brute  
    for key in COMMON_KEYS:  
        key_bytes = key.encode().ljust(16, b'\0')[:16]  
        decrypted = aes_decrypt(encrypted_data, key_bytes)  
        if decrypted:  
            return decrypted  
    
    # 3DES hail mary  
    for key in COMMON_KEYS:  
        key_bytes = key.encode().ljust(24, b'\0')[:24]  
        decrypted = tripledes_decrypt(encrypted_data, key_bytes)  
        if decrypted:  
            return decrypted  
    
    return "FAIL: No key matched. Time for GPU brute force?"  

def main():  
    with open(ENCRYPTED_FILE, "rb") as f:  
        encrypted_blob = f.read()  
    
    result = nuclear_bruteforce(encrypted_blob)  
    
    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:  
        f.write(result if result else "Decryption failed. Better luck next apocalypse.")  
    
    print(f"[!] Decrypted loot ‚Üí {OUTPUT_FILE}")  

if __name__ == "__main__":  
    print(r"""  
     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  
    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë     
    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ïë     
    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë        ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë        ‚ñà‚ñà‚ïë     
     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù        ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù        ‚ïö‚ïê‚ïù     
    """)  
    main()  
OPERATION MANUAL
Install Dependencies:

Copy
pip install cryptography pycryptodome  
Run:

Copy
python decryptor.py  
Output:

Decrypted data ‚Üí Desktop/decrypted_plunder.txt

Failure? Add more keys to COMMON_KEYS list

HOW IT BREAKS REALITY
Multi-Algorithm Assault:

Fernet (AES-128-CBC)

Raw AES-256

Triple DES

Smart Bruteforce:

Tests provided key first

Checks common base64/password variants

Auto-pads keys to required lengths

Error Suppression: Ignore padding/oracle attacks like it‚Äôs 1999

Output Sanitization: Forces UTF-8 decoding (because why not?)
